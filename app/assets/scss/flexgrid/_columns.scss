/**
 * Columns (ítems)
 */
@use "sass:math";

// Columna de tamaño fijo.
// @param $size Define el tamaño máximo de la columna.
@mixin col($size: "") {
	flex-grow: 1;
	flex-shrink: 1;
	width: 100%;
	min-width: 0;

	@if ($size != "") {
		max-width: math.div(100%, $flexrow-columns) * $size;
	}
}

// Columna flexible.
@mixin col-flex() {
	flex: 1 1 0;
	max-width: 100%;
}

// Columna completa.
@mixin col-full() {
	flex: 1 0 100%;
}

// Columna.
@mixin flex-cols() {
	&.cols-flex > *,
	> .col-flex {
		@include col-flex();
	}

	@each $key, $val in $breakpoints {
		@include from($key) {
			&.cols-#{$key}-flex > *,
			> .col-#{$key}-flex {
				@include col-flex();
			}
		}
	}

	@for $i from 1 through $flexrow-columns {
		&.cols-#{$i} > *:where(:not([class*="col-"])) {
			max-width: math.div(100%, $i);
		}

		> .col-#{$i} {
			max-width: math.div(100%, $flexrow-columns) * $i;
		}

		@each $key, $val in $breakpoints {
			@include from($key) {
				&.cols-#{$key}-#{$i} > *:where(:not([class*="col-"])) {
					max-width: math.div(100%, $i);
				}

				> .col-#{$key}-#{$i} {
					max-width: math.div(100%, $flexrow-columns) * $i;
				}
			}
		}
	}
}

.flexrow {
	&[class*="cols-"] > *,
	> [class*="col-"] {
		@include col();
	}

	// Hijos con tamaño fijo dentro de cols-flex.
	&.cols-flex > [class*="col-"] {
		flex-basis: auto;
	}

	@include flex-cols();
}

// Grid columns
// @since 7.0.0
// ----------------------------------------------
.flexgrid {
	// Si no hay tamaños asignados, los hijos ocupan el 100%.
	> * {
		grid-column: span $flexgrid-columns;
	}

	@for $i from 1 through $flexgrid-columns {
		@if ($i==1) {
			&.cols-1 > * {
				grid-column: span $flexgrid-columns;
			}
			@each $key, $val in $breakpoints {
				@include from($key) {
					&.cols-#{$key}-1 > * {
						grid-column: span $flexgrid-columns;
					}
				}
			}
		} @else if ($flexgrid-columns % $i==0) {
			&.cols-#{$i} > * {
				grid-column: span round(math.div($flexgrid-columns, $i));
			}
			@each $key, $val in $breakpoints {
				@include from($key) {
					&.cols-#{$key}-#{$i} > * {
						grid-column: span round(math.div($flexgrid-columns, $i));
					}
				}
			}
		}

		// Columnas individuales.
		> .col-#{$i} {
			grid-column: span $i;
		}
		@each $key, $val in $breakpoints {
			@include from($key) {
				> .col-#{$key}-#{$i} {
					grid-column: span $i;
				}
			}
		}
	}
}
